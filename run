#!/usr/bin/env node
'use strict';

const fetch = require('node-fetch');
const jsdom = require('jsdom').jsdom;
const Koa = require('koa');
const Promise = require('bluebird');
const fs = Promise.promisifyAll(require('fs'));
const spawn = require('child_process').spawn;

//
// Constants
//
const cacheName = 'data.json';
const port = 3000;

//
// Main logic
//
async function read() {
  const fd = await fs.openAsync(cacheName, fs.constants.O_RDWR | fs.constants.O_CREAT);
  const bytes = await fs.readFileAsync(fd);
  try {
    const data = JSON.parse(bytes);
    console.log('캐시 사용\n');
    return data;
  } catch(e) { }

  // Local cache does not exist. Crawling...
  console.log('크롤링 시작 ...');

  const base_url = 'https://bravebold.tistory.com'
  const promises = [];
  for (let i = 1;; i += 1) {
    const url = `${base_url}/category/%EC%8A%A4%ED%8B%B0%EB%B8%90%20%EC%9C%A0%EB%8B%88%EB%B2%84%EC%8A%A4?page=${i}`;

    const res = await fetch(url);
    const body = await res.text();
    const document = jsdom(body);

    const posts = [...document.querySelectorAll('div.list_content > a.link_post')]
    const is_last_page = document.querySelector('div.area_paging a.btn_next').classList.contains('no-more-next');

    const data = posts.map(async dom => {
      // Retrieve the title of the page
      const title = dom.querySelector('a.link_post > strong.tit_post').textContent;

      // Retrieve the links of videos
      const url = base_url + dom.href;
      const res = await fetch(url);
      const body = await res.text();
      const document = jsdom(body);
      const links = [...document.querySelectorAll('iframe')].map(x => x.src);

      return { title, links };
    });

    Array.prototype.push.apply(promises, data);

    if (is_last_page) { break; }
  }

  const data = (await Promise.all(promises)).filter(a => a.links.length > 0);
  await fs.writeFileAsync(fd, JSON.stringify(data));

  console.log(`\
크롤링 완료!
  게시물 수 : ${data.length}
  동영상 수 : ${data.reduce((acc, {links}) => acc += links.length, 0)}
`);
  return data;
}

function exec(exe, args) {
  return new Promise((resolve, reject) => {
    const process = spawn(exe, args);

    const stdout = [], stderr = [];
    process.stdout.on('data', data => stdout.push(data));
    process.stderr.on('data', data => stderr.push(data));
    process.on('close', code => {
      const data = {
        code,
        stdout: Buffer.concat(stdout),
        stderr: Buffer.concat(stderr),
      };

      if (code === 0) {
        resolve(data);
      } else {
        reject(new Error(data));
      }
    });
  });
}

async function getIP() {
  const data = await exec('dig', ['+short', 'myip.opendns.com', '@resolver1.opendns.com']);
  return data.stdout.toString().trim();
}

async function main() {
  const data = await read();
  const app = new Koa();
  app.use(ctx => {
    ctx.body = `\
<!doctype html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Steven crawler</title>
</head>
<body>
  <h1>크롤링 결과</h1>
  ${data.reverse().map(({ title, links }) => `
  <h3>${title}</h3>
  <p>\
    ${links.map(l => `
    <a href="${l}">${l}</a>`).join('<br>')}
  </p>`).join('')}
</body>
</html>`;
  });
  app.listen(port);

  console.log(`See \x1b[33mhttp://${await getIP()}:${port}\x1b[0m`);
}

main().catch(e => console.error(e.stack));
