#!/usr/bin/env node
'use strict';

const fetch = require('node-fetch');
const jsdom = require('jsdom').jsdom;
const Promise = require('bluebird');
const fs = Promise.promisifyAll(require('fs'));

(async _ => {
  const base_url = 'https://bravebold.tistory.com'
  const promises = [];

  for (let i = 1;; i += 1) {
    const url = `${base_url}/category/%EC%8A%A4%ED%8B%B0%EB%B8%90%20%EC%9C%A0%EB%8B%88%EB%B2%84%EC%8A%A4?page=${i}`;

    const res = await fetch(url);
    const body = await res.text();
    const document = jsdom(body);

    const posts = [...document.querySelectorAll('div.list_content > a.link_post')]
    const is_last_page = document.querySelector('div.area_paging a.btn_next').classList.contains('no-more-next');

    const data = posts.map(async dom => {
      // Retrieve the title of the page
      const title = dom.querySelector('a.link_post > strong.tit_post').textContent;

      // Retrieve the links of videos
      const url = base_url + dom.href;
      const res = await fetch(url);
      const body = await res.text();
      const document = jsdom(body);
      const links = [...document.querySelectorAll('iframe')].map(x => x.src);

      return { title, links };
    });

    Array.prototype.push.apply(promises, data);

    if (is_last_page) { break; }
  }

  const data = (await Promise.all(promises)).filter(a => a.links.length > 0);
  const bytes = JSON.stringify(data);
  await fs.writeFileAsync('data.json', bytes);
  console.log(`\
크롤링 완료!

게시물 수 : ${data.length}
동영상 수 : ${data.reduce((acc, {links}) => acc += links.length, 0)}\
`);
})()
.catch(e => console.error(e.stack));
